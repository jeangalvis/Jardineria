// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(JardineriaContext))]
    [Migration("20231117073039_FirstMig")]
    partial class FirstMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<string>("ApellidoContacto")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("apellido_contacto");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("Fax")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fax");

                    b.Property<decimal?>("LimiteCredito")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("limite_credito");

                    b.Property<string>("LineaDireccion1")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("linea_direccion1");

                    b.Property<string>("LineaDireccion2")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("linea_direccion2");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre_cliente");

                    b.Property<string>("NombreContacto")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre_contacto");

                    b.Property<string>("Pais")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("pais");

                    b.Property<string>("Region")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("region");

                    b.Property<string>("Telefono")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("telefono");

                    b.HasKey("IdCliente")
                        .HasName("PRIMARY");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DetallePedido", b =>
                {
                    b.Property<string>("IdDetallePedido")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_detalle_pedido");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("CodigoPedido")
                        .HasColumnType("int")
                        .HasColumnName("codigo_pedido");

                    b.Property<string>("CodigoProducto")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("codigo_producto");

                    b.Property<short?>("NumeroLinea")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_linea");

                    b.Property<decimal?>("PrecioUnidad")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("precio_unidad");

                    b.HasKey("IdDetallePedido")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CodigoPedido" }, "fk_detalle_pedido_pedido_idx");

                    b.HasIndex(new[] { "CodigoProducto" }, "fk_detalle_pedido_producto1_idx");

                    b.ToTable("detalle_pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Property<int>("CodigoEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("codigo_empleado");

                    b.Property<string>("Apellido1")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("apellido1");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("apellido2");

                    b.Property<int?>("CodigoJefe")
                        .HasColumnType("int")
                        .HasColumnName("codigo_jefe");

                    b.Property<string>("CodigoOficina")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("codigo_oficina");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Extension")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("extension");

                    b.Property<string>("Nombre")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre");

                    b.Property<string>("Puesto")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("puesto");

                    b.HasKey("CodigoEmpleado")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CodigoJefe" }, "fk_empleado_empleado1_idx");

                    b.HasIndex(new[] { "CodigoOficina" }, "fk_empleado_oficina1_idx");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GamaProducto", b =>
                {
                    b.Property<int>("IdGama")
                        .HasColumnType("int")
                        .HasColumnName("id_gama");

                    b.Property<string>("DescripcionHtml")
                        .HasColumnType("tinytext")
                        .HasColumnName("descripcion_html");

                    b.Property<string>("DescripcionTexto")
                        .HasColumnType("tinytext")
                        .HasColumnName("descripcion_texto");

                    b.Property<string>("Imagen")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("imagen");

                    b.HasKey("IdGama")
                        .HasName("PRIMARY");

                    b.ToTable("gama_producto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Oficina", b =>
                {
                    b.Property<string>("CodigoOficina")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("codigo_oficina");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("LineaDireccion1")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("linea_direccion1");

                    b.Property<string>("LineaDireccion2")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("linea_direccion2");

                    b.Property<string>("Pais")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("pais");

                    b.Property<string>("Region")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("region");

                    b.Property<string>("Telefono")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("telefono");

                    b.HasKey("CodigoOficina")
                        .HasName("PRIMARY");

                    b.ToTable("oficina", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pago", b =>
                {
                    b.Property<int>("CodigoPago")
                        .HasColumnType("int")
                        .HasColumnName("codigo_pago");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_pago");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("forma_pago");

                    b.Property<int?>("IdTransaccion")
                        .HasColumnType("int")
                        .HasColumnName("id_transaccion");

                    b.Property<decimal?>("Total")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("total");

                    b.HasKey("CodigoPago")
                        .HasName("PRIMARY");

                    b.ToTable("pago", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("CodigoPedido")
                        .HasColumnType("int")
                        .HasColumnName("codigo_pedido");

                    b.Property<int>("CodigoCliente")
                        .HasColumnType("int")
                        .HasColumnName("codigo_cliente");

                    b.Property<int>("CodigoEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("codigo_empleado");

                    b.Property<int>("CodigoPago")
                        .HasColumnType("int")
                        .HasColumnName("codigo_pago");

                    b.Property<string>("Comentarios")
                        .HasColumnType("text")
                        .HasColumnName("comentarios");

                    b.Property<string>("Estado")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("estado");

                    b.Property<string>("FechaEntrega")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fecha_entrega");

                    b.Property<DateTime?>("FechaEsperada")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_esperada");

                    b.Property<DateTime?>("FechaPedido")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_pedido");

                    b.HasKey("CodigoPedido")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CodigoCliente" }, "fk_pedido_cliente1_idx");

                    b.HasIndex(new[] { "CodigoEmpleado" }, "fk_pedido_empleado1_idx");

                    b.HasIndex(new[] { "CodigoPago" }, "fk_pedido_pago1_idx");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<string>("CodigoProducto")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("codigo_producto");

                    b.Property<short>("CantidadStock")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad_stock");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Dimensiones")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("dimensiones");

                    b.Property<int>("IdGama")
                        .HasColumnType("int")
                        .HasColumnName("id_gama");

                    b.Property<string>("Nombre")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("PrecioActual")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("precio_actual");

                    b.Property<int>("Proveedor")
                        .HasColumnType("int")
                        .HasColumnName("proveedor");

                    b.HasKey("CodigoProducto")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGama" }, "fk_producto_gama_producto1_idx");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Property<int>("IdProveedor")
                        .HasColumnType("int")
                        .HasColumnName("id_proveedor");

                    b.Property<string>("Nombre")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre");

                    b.HasKey("IdProveedor")
                        .HasName("PRIMARY");

                    b.ToTable("proveedor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProveedorProducto", b =>
                {
                    b.Property<int>("IdProvprod")
                        .HasColumnType("int")
                        .HasColumnName("id_provprod");

                    b.Property<decimal?>("PrecioProveedor")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("precio_proveedor");

                    b.Property<string>("ProductoCodigoProducto")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("producto_codigo_producto");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("proveedor_id");

                    b.HasKey("IdProvprod")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductoCodigoProducto" }, "fk_proveedor_producto_producto1_idx");

                    b.HasIndex(new[] { "ProveedorId" }, "fk_proveedor_producto_proveedor1_idx");

                    b.ToTable("proveedor_producto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUserfk")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdUserfk");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("IdUserfk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolfk")
                        .HasColumnType("int");

                    b.HasKey("IdUserfk", "IdRolfk");

                    b.HasIndex("IdRolfk");

                    b.ToTable("userRols", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DetallePedido", b =>
                {
                    b.HasOne("Domain.Entities.Pedido", "CodigoPedidoNavigation")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("CodigoPedido")
                        .IsRequired()
                        .HasConstraintName("fk_detalle_pedido_pedido");

                    b.HasOne("Domain.Entities.Producto", "CodigoProductoNavigation")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("CodigoProducto")
                        .HasConstraintName("fk_detalle_pedido_producto1");

                    b.Navigation("CodigoPedidoNavigation");

                    b.Navigation("CodigoProductoNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.HasOne("Domain.Entities.Empleado", "CodigoJefeNavigation")
                        .WithMany("InverseCodigoJefeNavigation")
                        .HasForeignKey("CodigoJefe")
                        .HasConstraintName("fk_empleado_jefe");

                    b.HasOne("Domain.Entities.Oficina", "CodigoOficinaNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("CodigoOficina")
                        .HasConstraintName("fk_empleado_oficina1");

                    b.Navigation("CodigoJefeNavigation");

                    b.Navigation("CodigoOficinaNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.HasOne("Domain.Entities.Cliente", "CodigoClienteNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("CodigoCliente")
                        .IsRequired()
                        .HasConstraintName("fk_pedido_cliente1");

                    b.HasOne("Domain.Entities.Empleado", "CodigoEmpleadoNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("CodigoEmpleado")
                        .IsRequired()
                        .HasConstraintName("fk_pedido_empleado1");

                    b.HasOne("Domain.Entities.Pago", "CodigoPagoNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("CodigoPago")
                        .IsRequired()
                        .HasConstraintName("fk_pedido_pago1");

                    b.Navigation("CodigoClienteNavigation");

                    b.Navigation("CodigoEmpleadoNavigation");

                    b.Navigation("CodigoPagoNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.HasOne("Domain.Entities.GamaProducto", "IdGamaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdGama")
                        .IsRequired()
                        .HasConstraintName("fk_producto_gama_producto1");

                    b.Navigation("IdGamaNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ProveedorProducto", b =>
                {
                    b.HasOne("Domain.Entities.Producto", "ProductoCodigoProductoNavigation")
                        .WithMany("ProveedorProductos")
                        .HasForeignKey("ProductoCodigoProducto")
                        .HasConstraintName("fk_proveedor_producto_producto1");

                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("ProveedorProductos")
                        .HasForeignKey("ProveedorId")
                        .IsRequired()
                        .HasConstraintName("fk_proveedor_producto_proveedor1");

                    b.Navigation("ProductoCodigoProductoNavigation");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUserfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("UsersRols")
                        .HasForeignKey("IdRolfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Usuario")
                        .WithMany("UsersRols")
                        .HasForeignKey("IdUserfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Navigation("InverseCodigoJefeNavigation");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Entities.GamaProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Domain.Entities.Oficina", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Pago", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Navigation("DetallePedidos");

                    b.Navigation("ProveedorProductos");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Navigation("ProveedorProductos");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UsersRols");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRols");
                });
#pragma warning restore 612, 618
        }
    }
}
